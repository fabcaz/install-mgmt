USE installdb;

/*
INSTALLER.type, MEMBER.status, INSTALL.status and NODE.status should be FKs to
  tables that hold the type/status names but for now, CHECK suffices.
 */

-- additional lookup probably outweighs the space saving (which is only beneficial if large buildings are entirely serviced)


CREATE TABLE IF NOT EXISTS INSTALL_REQUEST_TYPE (
  
  id TINYINT UNSIGNED AUTO_INCREMENT,
  name VARCHAR(36) NOT NULL,

  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS INSTALLER_STATUS (
  
  id TINYINT UNSIGNED AUTO_INCREMENT,
  name VARCHAR(36) NOT NULL,

  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS MEMBER_STATUS (
  
  id TINYINT UNSIGNED AUTO_INCREMENT,
  name VARCHAR(36) NOT NULL,

  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS PERSON (

  id INT UNSIGNED AUTO_INCREMENT,
  first_name VARCHAR(36) NOT NULL,
  last_name VARCHAR(36),
  slack_id VARCHAR(36),
  email VARCHAR(36) NOT NULL,
  phone_number VARCHAR(10),

  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS ADDRESS (

  id INT UNSIGNED AUTO_INCREMENT,
  apt_unit_number VARCHAR(8),
  street_address VARCHAR(36) NOT NULL,
  city VARCHAR(36) NOT NULL,
  state VARCHAR(2) NOT NULL,
  zipcode INT NOT NULL,

  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS INSTALLER (
  
  id INT UNSIGNED AUTO_INCREMENT,
  person_id INT UNSIGNED NOT NULL,
  role_given_date TIMESTAMP NOT NULL,
  -- type VARCHAR(36) NOT NULL CHECK (type IN ('LEAD', 'ASSISTANT')) DEFAULT 'ASSISTANT',
  type TINYINT UNSIGNED NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (person_id) REFERENCES PERSON (id) ON DELETE CASCADE,
  FOREIGN KEY (type) REFERENCES INSTALLER_STATUS (id)
);

CREATE TABLE IF NOT EXISTS HARDWARE (
  
  id INT UNSIGNED AUTO_INCREMENT,
  name VARCHAR(36) NOT NULL,

  PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS MEMBER (
  
  id INT UNSIGNED AUTO_INCREMENT,
  person_id INT UNSIGNED NOT NULL,
  role_given_date TIMESTAMP NOT NULL,
  -- status VARCHAR(36) NOT NULL CHECK (status IN ('ACTIVE', 'INACTIVE')) DEFAULT 'ACTIVE',
  status TINYINT UNSIGNED NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (person_id) REFERENCES PERSON (id) ON DELETE CASCADE,
  FOREIGN KEY (status) REFERENCES MEMBER_STATUS (id)
);

-- Should not delete on cascade; most of the tables referenced should actually soft delete rows instead
CREATE TABLE IF NOT EXISTS INSTALL_REQUEST (
  
  id INT UNSIGNED AUTO_INCREMENT,
  install_request_type_id TINYINT UNSIGNED NOT NULL,
  requester_person_id INT UNSIGNED NOT NULL,
  address_id INT UNSIGNED NOT NULL,
  lead_installer_id INT UNSIGNED, -- NOT NULL,
  requester_notes VARCHAR(255),
  lead_notes VARCHAR(255),
  floor_number SMALLINT,
  created_date DATE NOT NULL DEFAULT (CURRENT_DATE),
  claimed_date DATE,
  completed_date DATE,

  PRIMARY KEY (id),
  FOREIGN KEY (install_request_type_id) REFERENCES INSTALL_REQUEST_TYPE (id) ON DELETE CASCADE,
  FOREIGN KEY (requester_person_id) REFERENCES PERSON (id) ON DELETE CASCADE,
  FOREIGN KEY (address_id) REFERENCES ADDRESS (id) ON DELETE CASCADE,
  FOREIGN KEY (lead_installer_id ) REFERENCES INSTALLER (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS INSTALL (
  
  id INT UNSIGNED AUTO_INCREMENT,
  install_request_id INT UNSIGNED NOT NULL,
  address_id INT UNSIGNED NOT NULL,
  status VARCHAR(36) NOT NULL CHECK (status in ('active', 'inactive', 'active_no_owner')) DEFAULT 'active',

  PRIMARY KEY (id),
  FOREIGN KEY (install_request_id) REFERENCES INSTALL_REQUEST (id) ON DELETE CASCADE,
  FOREIGN KEY (address_id) REFERENCES ADDRESS (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS NODE (
  
  id INT UNSIGNED AUTO_INCREMENT,
  install_request_id INT UNSIGNED NOT NULL,
  address_id INT UNSIGNED NOT NULL,
  status VARCHAR(36) NOT NULL CHECK (status in ('active', 'inactive', 'active_no_owner')) DEFAULT 'active',

  PRIMARY KEY (id),
  FOREIGN KEY (install_request_id) REFERENCES INSTALL_REQUEST (id) ON DELETE CASCADE,
  FOREIGN KEY (address_id) REFERENCES ADDRESS (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS MEMBER_X_INSTALL (
  install_id INT UNSIGNED  NOT NULL,
  member_id INT UNSIGNED  NOT NULL,

  PRIMARY KEY (install_id, member_id),
  FOREIGN KEY (install_id) REFERENCES INSTALL (id) ON DELETE CASCADE,
  FOREIGN KEY (member_id) REFERENCES MEMBER (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS MEMBER_X_NODE (
  node_id INT UNSIGNED  NOT NULL,
  member_id INT UNSIGNED  NOT NULL,

  PRIMARY KEY (node_id, member_id),
  FOREIGN KEY (node_id) REFERENCES NODE (id) ON DELETE CASCADE,
  FOREIGN KEY (member_id) REFERENCES MEMBER (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS NODE_X_HARDWARE (
  node_id INT UNSIGNED  NOT NULL,
  hardware_id INT UNSIGNED  NOT NULL,

  PRIMARY KEY (node_id, hardware_id),
  FOREIGN KEY (node_id) REFERENCES NODE (id) ON DELETE CASCADE,
  FOREIGN KEY (hardware_id) REFERENCES HARDWARE (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS INSTALL_X_HARDWARE (
  install_id INT UNSIGNED NOT NULL,
  hardware_id INT UNSIGNED NOT NULL,

  PRIMARY KEY (install_id, hardware_id),
  FOREIGN KEY (install_id) REFERENCES INSTALL (id) ON DELETE CASCADE,
  FOREIGN KEY (hardware_id) REFERENCES HARDWARE (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS INSTALL_X_NODE (
  node_id INT UNSIGNED NOT NULL,
  install_id INT UNSIGNED NOT NULL,

  PRIMARY KEY (node_id, install_id),
  FOREIGN KEY (node_id) REFERENCES NODE (id) ON DELETE CASCADE,
  FOREIGN KEY (install_id) REFERENCES INSTALL (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS INSTALL_REQUEST_X_HARDWARE (
  install_request_id INT UNSIGNED  NOT NULL,
  hardware_id INT UNSIGNED  NOT NULL,

  PRIMARY KEY (install_request_id, hardware_id),
  FOREIGN KEY (install_request_id) REFERENCES INSTALL_REQUEST (id) ON DELETE CASCADE,
  FOREIGN KEY (hardware_id) REFERENCES HARDWARE (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS INSTALL_REQUEST_LOS (
  install_request_id INT UNSIGNED NOT NULL,
  node_id INT UNSIGNED  NOT NULL,

  PRIMARY KEY (install_request_id, node_id),
  FOREIGN KEY (install_request_id) REFERENCES INSTALL_REQUEST (id) ON DELETE CASCADE,
  FOREIGN KEY (node_id) REFERENCES NODE (id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS INSTALL_REQUEST_PARTICIPANT (
  install_request_id INT UNSIGNED NOT NULL,
  installer_id INT UNSIGNED  NOT NULL,

  PRIMARY KEY (install_request_id, installer_id),
  FOREIGN KEY (install_request_id) REFERENCES INSTALL_REQUEST (id) ON DELETE CASCADE,
  FOREIGN KEY (installer_id) REFERENCES INSTALLER (id) ON DELETE CASCADE
);

-- look at global note 23332579-7186-4c54-a43a-f2932a75b3ed
CREATE TABLE IF NOT EXISTS INSTALL_REQUEST_PREFERED_DATES (
  id INT UNSIGNED  AUTO_INCREMENT,
  selected BOOLEAN NOT NULL DEFAULT FALSE,
  install_request_id INT UNSIGNED  NOT NULL,
  appointement_start_time TIMESTAMP NOT NULL,
  appointement_end_time TIMESTAMP NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (install_request_id) REFERENCES INSTALL_REQUEST (id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS INSTALL_REQUEST_SLACK_THREAD (
  id INT UNSIGNED AUTO_INCREMENT,
  install_request_id INT UNSIGNED NOT NULL,
  thread_url VARCHAR(255) NOT NULL,

  PRIMARY KEY (id),
  FOREIGN KEY (install_request_id) REFERENCES INSTALL_REQUEST (id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS NODE_LOS (
  node1_id INT UNSIGNED NOT NULL,
  node2_id INT UNSIGNED NOT NULL,

  PRIMARY KEY (node1_id, node2_id),
  FOREIGN KEY (node1_id) REFERENCES NODE (id) ON DELETE CASCADE,
  FOREIGN KEY (node2_id) REFERENCES NODE (id) ON DELETE CASCADE
);


